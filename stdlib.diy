;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

;; written during exercise

(define or
    (lambda (a b)
        (if a #t (if b #t #f))))

(define and
    (lambda (a b)
        (if a (if b #t #f) #f)))

(define xor
    (lambda (a b)
        (if a (if b #f #t) (if b #t #f))))

(define >=
    (lambda (a b)
        (or (> a b) (eq a b))))

(define <=
    (lambda (a b)
        (not (> a b))))

(define <
    (lambda (a b)
        (not (>= a b))))

(define length
    (lambda (l)
        (if (empty l) 0 (+ 1 (length (tail l))))))

(define sum
    (lambda (l)
        (if (empty l) 0 (+ (head l) (sum (tail l))))))

(define range
    (lambda (from to)
        (if (> from to) '() (cons from (range (+ from 1) to)))))

(define append
    (lambda (a b)
        (if (empty a) b (cons (head a) (append (tail a) b)))))

(define list
    (lambda (element)
        (cons element '())))

(define reverse
    (lambda (l)
        (if (empty l) '() (append (reverse (tail l)) (list (head l))))))

(define filter
    (lambda (predicate l)
        (if (empty l)
            '()
            (append
                (if (predicate (head l))
                    (list (head l))
                    '())
                (filter predicate (tail l))))))

(define map
    (lambda (mapper l)
        (if (empty l)
            '()
            (append
                (list (mapper (head l)))
                (map mapper (tail l))))))

(define reduce
    (lambda (reducer initial l)
        (if (empty l)
            (head (list initial))
            (reduce reducer (reducer initial (head l)) (tail l)))))

(define _insert
    (lambda (element l)
        (if (empty l)
            (list element)
            (if (<= element (head l))
                (cons element l)
                (append (list (head l)) (_insert element (tail l)))))))

(define _merge
    (lambda (a b)
        (if (empty a)
            (head (list b))
            (_merge (tail a) (_insert (head a) b)))))

(define sort
    (lambda (l)
        (if (empty l)
            '()
            ( _merge l '()))))
